import os
from flask import Flask, jsonify, request
from langchain_openai import ChatOpenAI, OpenAIEmbeddings
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.messages import HumanMessage
from langchain_elasticsearch import ElasticsearchStore
from psycopg_pool import ConnectionPool #Clase para manejar un pool de conexiones a PostreSQL, eficiente para m√∫ltiples accesos concurrentes
from langgraph.checkpoint.postgres import PostgresSaver #Permite guardar y restaurar checkpoints en PostgreSQL
from langgraph.prebuilt import create_react_agent #para crear el agente
#Agregados para la gesti√≥n de la memoria a corto plazo
from langmem.short_term import SummarizationNode,RunningSummary #SummarizationNode: nodo que resume cuando se pasa el umbral de tokens | #RunningSummary: clase para almacenar y actualizar el resumen progresivamente.
from langchain_core.messages.utils import count_tokens_approximately #Funci√≥n que estima cu√°ntos tokens tiene un mensaje. Se usa para decidir cu√°ndo resumir la conversaci√≥n.
from langgraph.prebuilt.chat_agent_executor import AgentState #es la clase base del estado del agente (mensajes, acciones, etc.).
from typing import Optional #Importa anotaci√≥n de tipos, usada para definir estructuras como dict[str, RunningSummary].
from langgraph.graph import StateGraph, START, MessagesState,add_messages
#StateGraph, defines nodos y transiciones entre ellos, como en una m√°quina de estados finitos.
#START, Constante especial que representa el punto de entrada del grafo
#MessagesState, Una estructura de estado predefinida que representa una conversaci√≥n como una lista de mensajes
from langgraph.graph.message import AnyMessage,add_messages,RemoveMessage
from langchain.tools import tool,StructuredTool

from langchain.pydantic_v1 import BaseModel, Field

from langchain_community.utilities.sql_database import SQLDatabase
from langchain_community.tools.sql_database.tool import QuerySQLDataBaseTool
from langchain_community.agent_toolkits import SQLDatabaseToolkit


index_url = os.getenv("index_url")
index_name = os.getenv("index_name")
langchain_password= os.getenv("langchain_password")
uribd =os.getenv("uribd")
os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY")

os.environ["LANGSMITH_ENDPOINT"]="https://api.smith.langchain.com"
os.environ["LANGCHAIN_API_KEY"] = os.getenv("LANGCHAIN_API_KEY")
os.environ["LANGCHAIN_TRACING_V2"] = "true"
os.environ["LANGCHAIN_PROJECT"] = "gcpaiagent"

app = Flask(__name__)

# ==================== TOOL 1: RAG PARA INFORMACI√ìN GENERAL DE PRIMA AFP ====================
class PrimaAFPInfoInput(BaseModel):
    """Esquema para b√∫squeda de informaci√≥n general sobre Prima AFP"""
    query: str = Field(description="Consulta sobre informaci√≥n general de Prima AFP") # Consulta obligatoria
    top_k: int = Field(default=5, description="N√∫mero de resultados (m√°ximo 10)") # N√∫mero de resultados (m√°x 10)
    categoria: Optional[str] = Field(default=None, description="Categor√≠a: 'descripcion','fondos', 'traslados', 'programas', 'inversiones', 'general', 'Ahorro Ya','Tipos de fondo','Programa AhorroYa!' ") # Filtro por categor√≠a
    min_density: Optional[float] = Field(default=0.3, description="Densidad sem√°ntica m√≠nima para filtrar resultados") # Filtro por densidad sem√°ntica

def buscar_info_general_prima_afp(
    query: str,
    top_k: int = 5,
    categoria: Optional[str] = None,
    min_density: Optional[float] = 0.3
) -> str:
    """
    Funci√≥n de b√∫squeda RAG para informaci√≥n general de Prima AFP (categor√≠a no estricta)
    """
    try:
        if top_k > 10:
            top_k = 10
        if top_k < 1:
            top_k = 1
            
        # Conexi√≥n a Elasticsearch
        embeddings = OpenAIEmbeddings()
        
        db = ElasticsearchStore(
            embedding=embeddings,
            index_name=index_name,
            es_url=index_url,
            es_user="elastic",
            es_password=langchain_password,
        )
        
        # B√∫squeda inicial
        initial_results = min(top_k * 5, 50)
        docs = db.similarity_search(query, k=initial_results)
        #print(docs)
        # Separar por prioridad: con categor√≠a y sin categor√≠a
        priorizados = []
        secundarios = []
        
        for doc in docs:
            metadata = doc.metadata
            density = metadata.get('semantic_density', 0)
            
            if density < min_density:
                continue  # filtrar por densidad
            
            categoria_doc = metadata.get("categoria", "").lower()
            if categoria and categoria.lower() in categoria_doc:
                priorizados.append(doc)
            else:
                secundarios.append(doc)
            
            if len(priorizados) >= top_k:
                break
        
        # Completar con secundarios si faltan documentos
        total_docs = priorizados + secundarios
        filtered_docs = total_docs[:top_k]
        
        # Formatear respuesta
        if not filtered_docs:
            return f"No encontr√© informaci√≥n sobre '{query}'. ¬øPodr√≠as ser m√°s espec√≠fico?"
        
        response_parts = [f"üìö Informaci√≥n sobre '{query}':\n"]
        
        for i, doc in enumerate(filtered_docs):
            response_parts.append(f"üìã INFORMACI√ìN {i+1}:")
            
            metadata = doc.metadata
            categoria_info = metadata.get('categoria', 'Informaci√≥n general')
            response_parts.append(f"   üìÇ Categor√≠a: {categoria_info}")
            
            content = doc.page_content.strip().replace("\n", " ")
            response_parts.append(f"   ‚ÑπÔ∏è  Contenido: {content[:400]}...")
            
            if metadata.get('semantic_density', 0) > 0.6:
                response_parts.append(f"   ‚≠ê Informaci√≥n verificada")
            
            response_parts.append("")
        
        return "\n".join(response_parts)
        
    except Exception as e:
        return f"‚ùå Error al buscar informaci√≥n: {str(e)}"  
# ====================================================================================================#

# OLD TOOL
###

@app.route('/agent', methods=['GET'])
def main():
    id_usuario = request.args.get('idagente')
    msg = request.args.get('msg')

    # ==================== TOOL 1: RAG PARA PREGUNTAS GENERALES===================
    tool_info_general = StructuredTool.from_function(
        func=buscar_info_general_prima_afp, # Funci√≥n que ejecuta
        name="info_general_prima_afp", # Nombre identificador
        description="""
        Herramienta para buscar informaci√≥n GENERAL sobre Prima AFP usando RAG.
        
        √ösala SOLO para:
        - Informaci√≥n sobre c√≥mo trasladarse a Prima AFP
        - Descripci√≥n de los tipos de fondos (caracter√≠sticas, perfiles de riesgo)
        - Programas de Prima AFP (Ahorro Ya, etc.)
        - D√≥nde invierte Prima AFP los fondos
        - Informaci√≥n institucional y general
        - Preguntas sobre el sistema de pensiones
        
        NO usar para consultas personalizadas del afiliado (usa las otras herramientas).
        """,
        args_schema=PrimaAFPInfoInput # Esquema de par√°metros
    )  
    #====================================================================================================
    
    # ==================== TOOL 2: TOOL DE SQL CONSULTAS PERSONALIZADAS POR AFILIADO ====================

    # Conexi√≥n a la base de datos
    db_sql = SQLDatabase.from_uri(
        database_uri=uribd,
        include_tables=[
            "afiliados",
            "saldos_fondos",
            "aportes",
            "tramites",
            "rentabilidad_fondos",
            "empleadores"
        ]
    )

    # Herramienta para consultar la base de datos
    #sql_tool = QuerySQLDataBaseTool(db=db_sql)

    model = ChatOpenAI(model="gpt-4.1-2025-04-14")
    toolkit_bd = SQLDatabaseToolkit(db=db_sql,llm=model)
    sql_tools = toolkit_bd.get_tools()

    #====================================================================================================

############################## DEFINICION DEL AGENTE######################
# Variables de memoria
    connection_kwargs = {
        "autocommit": True,
        "prepare_threshold": 0,
    }

    # Inicializamos la memoria
    with ConnectionPool(
        conninfo=uribd,
        max_size=20,
        kwargs=connection_kwargs,
    ) as pool:

        checkpointer = PostgresSaver(pool)

        # Inicializamos el modelo - CORREGIDO: modelo v√°lido
        model = ChatOpenAI(model="gpt-4.1-2025-04-14") #gpt-4.1-2025-04-14

        summarization_node = SummarizationNode(
            token_counter=count_tokens_approximately,
            model=model,
            max_tokens=4048, #umbral para decirle al agente cuando se debe resumir el contexto que se le env√≠a al modelo
            max_summary_tokens=2048, #l√≠mite de tokens del resumen
            output_messages_key="llm_input_messages", #Variable donde se guarda el historial de los mensajes, sobre el cual se decide si resumir o no
        )

        class State(AgentState):
            # NOTE: we're adding this key to keep track of previous summary information
            # to make sure we're not summarizing on every LLM call
            #context: dict[str, Any]
            context: dict[str, RunningSummary]

        #toolkit = [tool_rag]  # era 'tolkit'
        toolkit = [tool_info_general] + sql_tools
        #toolkit = sql_tools

        system_prompt = """
            Eres un asistente gentil y especializado de Prima AFP (una administradora de fondo de pensiones) que puede ayudar tanto con informaci√≥n general como con consultas personalizadas de afiliados.
            
            Tienes varias herramientas disponibles:
            1.- **info_general_prima_afp**: Para informaci√≥n GENERAL sobre Prima AFP
                - C√≥mo trasladarse a Prima AFP
                - Descripci√≥n de fondos (caracter√≠sticas, perfiles de riesgo)
                - Programas como Ahorro Ya
                - D√≥nde invierte Prima AFP
                - Informaci√≥n institucional

            2.- Vas a interactuar con una base de datos SQL para resolver las consultas que te hagan
                Dada una pregunta de entrada, crea una consulta {dialect} sint√°cticamente correcta para ejecutarla, luego analiza los resultados de la consulta y devuelve la respuesta. A menos que el usuario especifique un n√∫mero espec√≠fico de ejemplos que desea obtener, limita siempre tu consulta a un m√°ximo de {top_k} resultados.
                Puedes ordenar los resultados por una columna relevante para devolver los ejemplos m√°s interesantes de la base de datos. Nunca consultes todas las columnas de una tabla espec√≠fica, solo solicita las columnas relevantes dada la pregunta.

                Debes revisar tu consulta antes de ejecutarla. Si recibes un error al ejecutar una consulta, reescr√≠bela e int√©ntalo de nuevo.

                NO realices ninguna instrucci√≥n DML (INSERT, UPDATE, DELETE, DROP, etc.) en la base de datos.

                Para empezar, SIEMPRE debes revisar las tablas de la base de datos para ver qu√© puedes consultar. NO omitas este paso.

                Luego debes consultar el esquema de las tablas m√°s relevantes.

            Si no cuentas con una herramienta espec√≠fica para resolver una pregunta, inf√≥rmalo claramente e indica c√≥mo puedes ayudar.
            
            Instrucciones:
                - Responde en espa√±ol con amplios detalles seg√∫n el contexto proporcionado
                - Si no sabes la respuesta, di claramente que no tienes esa informaci√≥n, no supongas ni alucines.
                - Si encuentras links en el contexto, incluyelos obligatoriamente en la respuesta
                - Usa emojis para organizar la informaci√≥n
                - Siempre pregunta si necesita m√°s informaci√≥n

            """.format(
                dialect=db_sql.dialect,
                top_k=5,
            )

        agent_executor = create_react_agent(
                model,
                tools=toolkit,
                pre_model_hook=summarization_node,
                state_schema=State,
                checkpointer=checkpointer,
                prompt=system_prompt,
            )

        config = {"configurable": {"thread_id": id_usuario}}
        msg_user = msg + "el usuario es: " + id_usuario
        response = agent_executor.invoke({"messages": [HumanMessage(content=msg_user)]}, config=config)
        
        #return jsonify({"msg": "Agente iniciado correctamente"})
        return response['messages'][-1].content

if __name__ == '__main__':
    # La aplicaci√≥n escucha en el puerto 8080, requerido por Cloud Run
    app.run(host='0.0.0.0', port=8080)    